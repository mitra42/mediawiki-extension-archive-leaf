#!/usr/bin/env bash
echo "Installing mediawiki-extension-archive-leaf and fonts for offline use of Palm wiki"
set -e
MEDIAWIKI="../.."
ARCHIVELEAFDIR="."
#MEDIAWIKI=/usr/share/mediawiki
#MEDIAWIKI=/var/www/html/mediawiki
#ARCHIVELEAFDIR=${MEDIAWIKI}/extensions/ArchiveLeaf
REPO_METROLOOK=https://github.com/wikimedia/mediawiki-skins-Metrolook/archive/REL1_34.zip
WAYBACK_METROLOOK="https://web.archive.org/web/20200107052607/https://extdist.wmflabs.org/dist/skins/Metrolook-REL1_34-48c1b49.tar.gz";
LOCALSETTINGS=${MEDIAWIKI}/LocalSettings.php
#TODO offline-fonts could just use the env variables
export MEDIAWIKI ARCHIVELEAFDIR
# Group transliterator will be owned by, on most systems groups and users are related
GROUP=${USER}
# For service installation - this can also be autodetected - see code in dweb-mirror/install.sh
OPERATINGSYSTEM="raspbian"


# This is following the steps in README.md
pushd ${ARCHIVELEAFDIR} >>/dev/null
  maintenance/transcriber-install # yarn dependencies
  maintenance/offline-fonts # Install offline fonts
  maintenance/transcriber-build # transcriber javascript and css
  maintenance/templates-import # import the required Template:Entry and Template:EntryImage pages into MediaWiki.

  sudo apt-get install -y libicu-dev
  pushd /var/lib
    if [ -d "icu-transliterator-service" ]
    then
      echo "Already have icu-transliterator-service - refreshing"
      pushd icu-transliterator-service
        sudo git pull
      popd
    else
      echo "Getting icu-transliterator-service"
      sudo git clone https://github.com/longnow/icu-transliterator-service
    fi
    sudo chown -R "${USER}.${GROUP}" icu-transliterator-service
    pushd icu-transliterator-service
      # Note will get error messages about version of node usually
      npm install
      # Samples are balinese
      cp transliterators-sample.json transliterators.json
    popd # Back to /var/lib
  popd # Back to $ARCHIVELEAFDIR
  # Setup service, not can run it with `PORT=5000 node ./index.js` if want a different port.
  cat transliterator.service \
  | sed -e "s:{{ transcriber_dir }}:/var/lib/icu-transliterator-service:" | sed -e "s:User=root:User=${USER}:" >/tmp/transliterator.service
  if [ "${OPERATINGSYSTEM}" = "armbian" -o "${PLATFORM}" = "rachel" -o "${OPERATINGSYSTEM}" = "raspbian" -o "${OPERATINGSYSTEM}" = "linux" ]
  then
    diff /tmp/transliterator.service /lib/systemd/system || sudo cp /tmp/transliterator.service /lib/systemd/system
    sudo systemctl enable transliterator.service # Links /etc/systemd/system/multi-user.targets.wants/transliterator.service to /lib/systemd/system/transliterator
    sudo systemctl daemon-reload   # Starts transliterator
    #sudo service transliterator start # Alternative starter
    #sudo systemctl start transliterator.service # Alternative starter
    sudo service transliterator start
    echo "If its working, the next line should respond with wayan"
    curl http://localhost:3000/Balinese-ban_001 -d ᬯᬬᬦ᭄᭞
  else
    echo "===== ERROR Installer needs a strategy to setup auto-start on this platform"
  fi

popd # Back to ~

# The Metrolook skin is fetched from the archive, because MediaWiki's skin distribution system makes it impossible
# (maybe intentionally) to script fetching skins.
# You can get the skin at https://www.mediawiki.org/wiki/Skin:Metrolook
# and I've opened a discussion at https://www.mediawiki.org/wiki/Extension_talk:ExtensionDistributor
# but searching some past history suggests this is one of those wicked discussions they'll never solve
# because they've scoped the problem just too hard!
if [ -d ${MEDIAWIKI}/skins/Metrolook ]
then
  echo "Metrolook skin appears to be installed"
else
  pushd ${MEDIAWIKI}/skins
    # curl -L ${WAYBACK_METROLOOK} | tar -xz
    curl -L -o/tmp/metrolook.zip ${REPO_METROLOOK}
    unzip -q /tmp/metrolook.zip
    mv mediawiki-skins-Metrolook-REL1_34 ./Metrolook
  popd # Back to ~
  maintenance/metrolook-patch # remove unwanted navigation
fi

APACHECONF=/etc/apache2/conf-available/mediawiki.conf
APACHECONFLINE='Alias /transcriber/static /var/lib/mediawiki/extensions/ArchiveLeaf/transcriber/build/static'

if [ -f ${APACHECONF} ]
then
  if ! grep 'transcriber/static' ${APACHECONF}
  then
    echo ${APACHECONFLINE} | sudo tee -a ${APACHECONF}
    sudo apachectl graceful
  fi
else
  cat <<EOT
I cant find the Apache configuration file in $APACHECONF if you are running nginx, it will need lines like ...
location /transcriber/static {
    alias /var/www/palmleaf/extensions/ArchiveLeaf/transcriber/build/static;
}
EOT
fi


function appendOrReplaceBegin {
  LOCALSETTINGSBAK=${MEDIAWIKI}/LocalSettings.`date -Iminutes`.php
  if [ -f "${LOCALSETTINGS}" ]
  then
    echo "Saving old copy of ${LOCALSETTINGS}"
    sudo cp ${LOCALSETTINGS} ${LOCALSETTINGSBAK}
  fi
}
function appendOrReplaceEnd {
  diff ${LOCALSETTINGSBAK} ${LOCALSETTINGS} || echo "===changes made above ==="
}
function appendOrReplace {
  if grep $1 ${LOCALSETTINGS}
  then
    echo "Swapping in place to: $2"
    sudo sed -i -e "s!^.*$1.*\$!$2!" ${LOCALSETTINGS}
  else
    echo "Appending: $2"
    echo $2 | sudo tee -a ${LOCALSETTINGS}
  fi
}

appendOrReplaceBegin
appendOrReplace wgArchiveLeafMirrorServer '$wgArchiveLeafMirrorServer = $wgServer . ":4244";'
appendOrReplace wgAllowExternalImages '$wgAllowExternalImages = true;'
appendOrReplace wgAllowImageTag '$wgAllowImageTag = true;'
appendOrReplace wgCapitalLinks '$wgCapitalLinks = false;'
appendOrReplace wgAllowDisplayTitle '$wgAllowDisplayTitle = true;'
appendOrReplace wgRestrictDisplayTitle '$wgRestrictDisplayTitle = false;'
appendOrReplace wgAllowCopyUploads '$wgAllowCopyUploads = true;'
appendOrReplace wgEnableUploads '$wgEnableUploads = true;'
appendOrReplace max_execution_time 'ini_set("max_execution_time", 0);'
appendOrReplace wgUseImageMagick '$wgUseImageMagick = true;'
appendOrReplace "wfLoadExtension.*ParserFunctions" 'wfLoadExtension( "ParserFunctions" );' # Reqd by ArchiveLeaf template
appendOrReplace "wfLoadExtension.*ArchiveLeaf" 'wfLoadExtension( "ArchiveLeaf" );'
appendOrReplace "wfLoadSkin.*Metrolook" 'wfLoadSkin( "Metrolook" );'
appendOrReplace wgMetrolookDownArrow '$wgMetrolookDownArrow = false;'
appendOrReplace wgMetrolookUploadButton '$wgMetrolookUploadButton = false;'
appendOrReplace wgDefaultSkin '$wgDefaultSkin = "Metrolook";'
appendOrReplace "wgGroupPermissions.*user.*archiveleaf" '$wgGroupPermissions["user"]["archiveleaf"] = true; # Allow users to import pages (by default only "sysops" allowed to improt pages)'
appendOrReplace "wgArchiveLeafTemplateName" '$wgArchiveLeafTemplateName = "Entry"; # primary template (default shown)'
appendOrReplace wgArchiveLeafTemplateImageName '$wgArchiveLeafTemplateImageName = "EntryImage"; # per-image template (default shown)'
appendOrReplace wgArchiveLeafImportScript '$wgArchiveLeafImportScript = "/home/davidk/script/update_ia_item.py"; # script to run after importing IA item as a new wiki page. item identifier is passed as an argument.'
appendOrReplace wgArchiveLeafBaseURL '$wgArchiveLeafBaseURL = $wgArchiveLeafMirrorServer; # base URL (default "https://archive.org" )'
appendOrReplace wgArchiveLeafApiURL '$wgArchiveLeafApiURL = $wgArchiveLeafMirrorServer; # API URL (default "https://api.archivelab.org")'
appendOrReplace wgArchiveLeafIiifBaseUrl '$wgArchiveLeafIiifBaseUrl = $wgArchiveLeafMirrorServer . "/ifff"; # IIIF API online would be: https://iiif.archivelab.org/iiif'
appendOrReplace wgArchiveLeafArchiveOrgRewrite '$wgArchiveLeafArchiveOrgRewrite = $wgArchiveLeafMirrorServer;'
appendOrReplace wgResponsiveImages '$wgResponsiveImages = false; # Set false to use 400px thumbnails whatever screen size'
appendOrReplace wgGenerateThumbnailOnParse '$wgGenerateThumbnailOnParse = true; # Set true to enable making thumbnails when dont exist'
appendOrReplace wgUseImageResize '$wgUseImageResize = true; # if set to true, if false then will always send full size image to browser'
appendOrReplace wgArchiveLeafAutoTransliterate '$wgArchiveLeafAutoTransliterate = true; # enable auto-transliteration'
appendOrReplace wgArchiveLeafTransliterateUrl '$wgArchiveLeafTransliterateUrl = "http://localhost:3000"; # location of icu-transliterator-service'

appendOrReplaceEnd

service transliterator status
